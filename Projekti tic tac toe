#include <iostream>
#include <cstdlib>
#include <ctime>
#include <vector>

using namespace std;

char board[3][3] = { {'1', '2', '3'},
                     {'4', '5', '6'},
                     {'7', '8', '9'} };

int player = 1;  
char mark;
int difficulty = 1;  


void displayBoard() {
    system("clear");  

    cout << "Tic-Tac-Toe Game\n";
    cout << "Player 1 (X)  -  AI (O)\n\n";

    for (int i = 0; i < 3; i++) {
        cout << " " << board[i][0] << " | " << board[i][1] << " | " << board[i][2] << " \n";
        if (i < 2) cout << "---|---|---\n";
    }
    cout << endl;
}
bool placeMark(int slot) {
    int row = (slot - 1) / 3;
    int col = (slot - 1) % 3;

    if (board[row][col] == 'X' || board[row][col] == 'O') {
        return false;
    }

    board[row][col] = mark;
    return true;
}

bool checkWin() {
    
    for (int i = 0; i < 3; i++) {
        if ((board[i][0] == board[i][1] && board[i][1] == board[i][2]) ||
            (board[0][i] == board[1][i] && board[1][i] == board[2][i])) {
            return true;
        }
    }
    if ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) ||
        (board[0][2] == board[1][1] && board[1][1] == board[2][0])) {
        return true;
    }
    return false;
}


bool isBoardFull() {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] != 'X' && board[i][j] != 'O') {
                return false;
            }
        }
    }
    return true;
}
int minimax(int depth, bool isMaximizing) {
    if (checkWin()) {
        return isMaximizing ? -10 : 10;
    }
    if (isBoardFull()) {
        return 0;
    }

    int best = (isMaximizing) ? -1000 : 1000;

   
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] != 'X' && board[i][j] != 'O') {
                char current = board[i][j];
                board[i][j] = (isMaximizing) ? 'O' : 'X';

                int score = minimax(depth + 1, !isMaximizing);
                board[i][j] = current;

                best = (isMaximizing) ? max(best, score) : min(best, score);
            }
        }
    }
    return best;
}


int bestMove() {
    int bestVal = -1000;
    int move = -1;

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] != 'X' && board[i][j] != 'O') {
                char current = board[i][j];
                board[i][j] = 'O';  
                int moveVal = minimax(0, false);
                board[i][j] = current;

                if (moveVal > bestVal) {
                    move = i * 3 + j + 1;  
                    bestVal = moveVal;
                }
            }
        }
    }

    return move;
}


void aiRandomMove() {
    int slot;
    do {
        slot = rand() % 9 + 1;  
    } while (board[(slot - 1) / 3][(slot - 1) % 3] == 'X' || board[(slot - 1) / 3][(slot - 1) % 3] == 'O');
    board[(slot - 1) / 3][(slot - 1) % 3] = 'O';
    cout << "AI chooses: " << slot << "\n";
}


void aiMove() {
    if (difficulty == 1) {
        aiRandomMove(); 
    } else if (difficulty == 2) {
        aiRandomMove(); 
    } else {
        int slot = bestMove(); 
        board[(slot - 1) / 3][(slot - 1) % 3] = 'O';
        cout << "AI chooses: " << slot << "\n";
    }
}int main() {
    srand(time(0));

    int slot;
    int moves = 0;

    cout << "Choose difficulty (1 = Easy, 2 = Medium, 3 = Hard): ";
    cin >> difficulty;

    while (true) {
        displayBoard();

       
        if (moves % 2 == 0) {
            player = 1;
            mark = 'X';

            cout << "Player, enter a slot (1-9): ";
            cin >> slot;

            if (slot < 1 || slot > 9 || !placeMark(slot)) {
                continue;
            }
        } else {
            player = 2;
            mark = 'O';

           
            aiMove();
        }

        moves++;

       
        if (checkWin()) {
            displayBoard();
            if (player == 1) {
                cout << "🎉 Player wins! 🎉\n";
            } else {
                cout << "🎉 AI wins! 🎉\n";
            }
            break;
        }

        if (isBoardFull()) {
            displayBoard();
            cout << "It's a draw! 🤝\n";
            break;
        }
    }

    return 0;
}